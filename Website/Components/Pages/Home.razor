@page "/"
@using Humanizer
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@code {
    enum OSPath { WindowsCompatible, LinuxCompatible }
    private string? CurrentDirectory;
    private string? PathRoot;
    private OSPath HostedFileSystem;
    private IEnumerable<string> OtherFiles;
    private string? Errors;
    private MarkupString ReadMe;
    private string Markdown;
    private IEnumerable<string> ExcludedWinDirectories = new string[] { @"C:\Windows", @"C:\Program Files", @"C:\Program Files (x86)", @"C:\ProgramData", @"C:\Users", @"C:\$Recycle.Bin", @"C:\System Volume Information", @"C:\pagefile.sys", @"C:\hiberfil.sys", @"C:\Config.Msi" };
    private IEnumerable<string> ExcludedNixDirectories = new string[] { @"/proc", @"/sys", @"/dev", @"/boot", @"/tmp", @"/run", @"/home", @"/root", @"/etc", @"/var", @"/opt", @"/srv", @"/bin", @"/sbin", @"/lib", @"/lib64", @"/usr", @"/var" };
    protected override void OnInitialized()
    {
        CurrentDirectory = Directory.GetCurrentDirectory();
        PathRoot = Directory.GetDirectoryRoot(CurrentDirectory);
        HostedFileSystem = PathRoot.Length == 1 ? OSPath.LinuxCompatible : OSPath.WindowsCompatible;
        try
        {
            var excludedFolders = HostedFileSystem == OSPath.WindowsCompatible ? ExcludedWinDirectories : ExcludedNixDirectories; // List of folder names to skip

            var options = new EnumerationOptions
            {
                IgnoreInaccessible = true,
                RecurseSubdirectories = true // Set this to false if you want to exclude subdirectories
            };
            var markingPath = 
                Directory
                    .EnumerateDirectories(PathRoot,"*dgilleland",options)
                    .FirstOrDefault(dir => !excludedFolders.Any(dir.Contains));
            OtherFiles = Directory.EnumerateFiles(markingPath);
            var found = OtherFiles.FirstOrDefault(x => x.EndsWith("ReadMe.md", StringComparison.InvariantCultureIgnoreCase));
            if(!string.IsNullOrEmpty(found))
            {
                Markdown = File.ReadAllText(found);
                ReadMe = new MarkupString(Markdig.Markdown.ToHtml(Markdown));
            }
        }
        catch(Exception ex)
        {
            Errors = ex.Message;
        }
    }
}

<fieldset>
    <legend>Diagnostics</legend>
    Running application from <code>@CurrentDirectory</code> on a <i>@HostedFileSystem.Humanize()</i> operating system.

    @if(string.IsNullOrEmpty(Errors))
    {
        <ul>
            @foreach(var item in OtherFiles)
            {
                <li>@item</li>
            }
        </ul>
    }
    else
    {
        <blockquote style="color: darkred; background-color: lightgray; padding: 1em 2em;">@Errors</blockquote>
    }

    <hr />
    <section>
        <details>
            <summary>HTML</summary>
            <article>@ReadMe</article>
        </details>
        <details>
            <summary>Markdown</summary>
            <pre style="background-color: ##d6f7f647; padding: .5em .2em;"><code>@Markdown</code></pre>
        </details>
    </section>
</fieldset>
<style>
    fieldset > section {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        column-gap: 1.5em;
        position: relative; /* Required for positioning pseudo-elements */
    }
    fieldset > section::before {
        content: "";
        position: absolute;
        top: 0;
        bottom: 0;
        left: calc(50% - 1px); /* Center the bar vertically */
        width: 2px; /* Adjust the width of the vertical bar */
        background-color: #333; /* Set the color of the bar */
    }
    fieldset > section pre {
        white-space: pre-line;
    }
</style>